PEP: 9999
Title: JSON Metadata API
Author: Cooper Lees <me@cooperlees.com>, Sumana Harihareswara <sh@changeset.nyc>
Sponsor: ≈Åukasz Langa <lukasz@python.org>
BDFL-Delegate: Donald Stufft <donald at stufft.io>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 28-JUN-2020
Post-History: 10-JUN-2020
Discussions-To:


Abstract
========

This PEP describes the Python Package Index (Warehouse) JSON API.
This API is accessed via HTTP GET requests.

Motivation
==========

This PEP aims to lock in the existing standard as a guarantee for consumers
(e.g., client applications like pip, pipenv and more). It also aims to help other
indexes (such as devpi, pypiserver and Artifactory) to implement the standard and be
assured of interoperability.

Definitions
===========

* **HTTP**: Hypertext Transfer Protocol
* **JSON API**: Canonical / historical name given to this API we are describing in this PEP
* **Metadata**: a set of data that describes and gives information about other data.
  In this case, *data* about an active Python Package on the Python Package Index.
* **Python Package**: Distributable archive of Python loadable source or binaries
* **TUF**: The Update Framework, as described in PEP 458


Use cases supported by the API
==============================

The *JSON API* is a read-only API to retrieve metadata of a Python Package.

Non-goals
=========

The following aspects will not be considered for the JSON API:

* Writeable endpoints: The JSON API is to remain read-only.

The following aspects will not be considered for this version of the JSON API:

* TUF integration and dependency resolution: This version of the JSON API is not
  protected by TUF, and so should not be used for dependency resolution. PyPI
  maintainers intend on providing a future download API that is TUF-protected
  within a few years.

Specification
=============

The JSON API is a HTTP GET based API. HTTP responses must be sent with the following content type:

::

   content-type: application/json

It is guaranteed to always have **only** strings as top-level key values.

Discovery
---------

The JSON API has a discovery endpoint at **/json**.
This endpoint will reply with the current API version.

Each API shall also have a GET discovery call at **/json/discovery/$endpoint_name**

Versioning
----------

The JSON API will use Semantic Versioning [3]_. This PEP currently covers version **1.0.0**

API URLs
--------

* /json: Shows API version
* /json/discover/$call_name: Description of the API call
* /json/project/$project_name: Return main JSON object described blow
* /json/p/$project_name: Alias of the above /json/project

Legacy URLs
-----------

This is the legacy URL on the main PyPI website.

* /pypi/$project_name/json

Guaranteed response fields
--------------------------

Using the JSON Schema draft standard [1]_ here are the expected returned metadata fields from the
JSON API. The complete JSON has been broken down by top-level key values.

**JSON Top Level Keys**

::

  {
    "info": {},
    "last_serial": 0,
    "releases": {},
    "urls": {}
  }

**info**

::

  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://pypi.org/json_api:info.schema.json",
    "title": "info",
    "description": "Generic information pulled from Python Package configuration",
    "type": "object",
    "properties": {
      "author": {
         "description": "The name of the company of individual who created the package",
         "type": "string"
      },
      "author_email": {
         "description": "The company or individual's email address",
         "type": "string"
      },
      "bugtrack_url": {
         "description": "URL to find issues and bugs for projects",
         "type": "string"
      },
      "classifiers": {
         "description": "Trove Classifier. List of classifiers: https://pypi.org/classifiers/",
         "type": "sequence"
      },
      "description": {
         "description": "Projects description displayed on the project PyPI page",
         "type": "string"
      },
      "description_content_type": {
         "description": "Description Content Type: https://packaging.python.org/guides/making-a-pypi-friendly-readme/",
         "type": "string"
      },
      "docs_url": {
         "description": "URL to projects documentation",
         "type": "string"
      },
      "download_url": {
         "description": "[deprecated] url to projects download page",
         "type": "string"
      },
      "downloads": {
         "description": "[deprecated] Download counts",
         "type": "object"
      },
      "home_page": {
         "description": "URL to project home page",
         "type": "string"
      },
      "keywords": {
         "description": "Keywords to use for project searching",
         "type": "string"
      },
      "license": {
         "description": "Projects Open Source License",
         "type": "string"
      },
      "maintainer": {
         "description": "Project Maintainer Name",
         "type": "string"
      },
      "maintainer_email": {
         "description": "Project Maintainer Email Address",
         "type": "string"
      },
      "name": {
         "description": "Projects Raw (non normailzed name)",
         "type": "string"
      },
      "package_url": {
         "description": "URL to the PyPI project page",
         "type": "string"
      },
      "platform": {
         "description": "[deprecated] @cooperlees does not know",
         "type": "string"
      },
      "project_url": {
         "description": "URL to the PyPI project page",
         "type": "string"
      },
      "project_urls": {
         "description": "Change Log, Homepage and Source Code URLs",
         "type": "object"
      },
      "release_url": {
         "description": "URL Latest version version project page",
         "type": "string"
      },
      "requires_dist": {
         "description": "Metadata calculated project dependencies",
         "type": "string"
      },
      "requires_python": {
         "description": "Python runtime version required for project: https://packaging.python.org/guides/dropping-older-python-versions/",
         "type": "string"
      },
      "summary": {
         "description": "Brief description of the project",
         "type": "string"
      },
      "version": {
         "description": "Latest version of the project available",
         "type": "string"
      },
      "yanked": {
         "description": "If the latest version has been yanked: PEP 592",
         "type": "boolean"
      },
      "yanked_reason": {
         "description": "Reason for applying PEP 592 version yank",
         "type": "string"
      },
    },
    "required": [
      "author",
      "author_email",
      "license",
      "name",
      "project_url",
      "version",
    ]
  }

**last_serial**

::

  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://pypi.org/json_api:last_serial.schema.json",
    "title": "last_serial",
    "description": "Internal PyPI serial indicating last modification",
    "type": "int"
  }

**releases**

::

  {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://pypi.org/json_api:releases.schema.json",
    "title": "releases",
    "description": "Per release (each version)",
    "type": "object",
    "properties": {
      "common_test": {
         "description": "The name of the company of individual who created the package",
         "type": "string"
      },
      "digests": {
         "description": "The company or individual's email address",
         "type": "object"
         "properties": {
            "md5": {
               "description": "The MD5 checksum of the release file",
               "type": "string"
            },
            "sha256": {
               "description": "The SHA256 checksum of the release file",
               "type": "string"
            }
         }
      }
    },
    "required": [ "author", "author_email" ]
  }

**urls**

Identical to releases, but for the latest release on the Python Package Index.


Deprecated response fields
--------------------------

The Python Package Index returns the following keys today, but they are not guaranteed
to be accurate, and are deprecated. Please feel free to leave these keys out of your
implementation.

**"info":**

* "downloads": This key and all children have been deprecated in favor of having clients
  use Google BigQuery data.

**"releases" / "urls":**

* "downloads": This key and all children have been deprecated in favor of having clients
  use Google BigQuery data.


Dealing with errors
-------------------

Client errors today are all handled via HTTP response codes. The following is returned:

* 301: When a JSON URL has a trailing / the server should redirect to
  a URL removing the tailing / removed
* 404: When a projects does not exist
* 500: When an internal code logic or database error occurs


Capitalization, case-sensitivity, and normalization
---------------------------------------------------

The JSON API normalizes package names as per PEP 503 [2]_.

References
==========

.. [1] JSON Schema https://json-schema.org/
.. [2] PEP 503 https://www.python.org/dev/peps/pep-0503/
.. [3] Semantic Versioning https://semver.org/


Acknowledgments
===============

* GitHub issue requesting PEP - https://github.com/pypa/packaging-problems/issues/367
* devpi issue requesting JSON API Support - https://github.com/devpi/devpi/issues/801

Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
